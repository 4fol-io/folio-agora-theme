// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin reset-text {
    font-family: $font-family-base;

    // We deliberately do NOT reset font-size or word-wrap.
    font-style: normal;
    font-weight: $font-weight-base;
    line-height: $line-height-base;
    text-align: left; // Fallback for where `start` is not supported
    text-align: start; // stylelint-disable-line declaration-block-no-duplicate-properties
    text-decoration: none;
    text-shadow: none;
    text-transform: none;
    letter-spacing: normal;
    word-break: normal;
    word-spacing: normal;
    white-space: normal;
    line-break: auto;
}

// Center block
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}


// Only display content to screen readers
//
// See: https://www.a11yproject.com/posts/2013-01-11-how-to-hide-content/
// See: https://hugogiraudel.com/2016/10/13/css-hide-and-seek/

@mixin sr-only() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px; // Fix for https://github.com/twbs/bootstrap/issues/25686
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Use in conjunction with .sr-only to only display content when it's focused.
//
// Useful for "Skip to main content" links; see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
//
// Credit: HTML5 Boilerplate

@mixin sr-only-focusable() {
  &:active,
  &:focus {
    position: static;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
}


/* Flexbox */

@mixin flexbox($options: "") {
    display: -webkit-box unquote($options);
    display: -moz-box unquote($options);
    display: -ms-flexbox unquote($options);
    display: -webkit-flex unquote($options);
    display: flex unquote($options);
}

@mixin flex($value: 1, $options: "") {
    -moz-flex: $value unquote($options);
    -webkit-flex: $value unquote($options);
    -ms-flex: $value unquote($options);
    flex: $value unquote($options);
}

@mixin flex-direction($value: row, $options: "") {
    -moz-flex-direction: $value unquote($options);
    -webkit-flex-direction: $value unquote($options);
    -ms-flex-direction: $value unquote($options);
    flex-direction: $value unquote($options);
}

@mixin flex-wrap($value: wrap, $options: "") {
    -moz-flex-wrap: $value unquote($options);
    -webkit-flex-wrap: $value unquote($options);
    -ms-flex-wrap: str-replace($value, "nowrap", "none") unquote($options);
    flex-wrap: $value unquote($options);
}

@mixin align-items($value: center, $options: "") {
    -webkit-align-items: $value unquote($options);
    -ms-flex-align: str-replace($value, "flex-") unquote($options);
    align-items: $value unquote($options);
}

@mixin justify-content($value, $options: "") {
    -moz-justify-content: $value unquote($options);
    -webkit-justify-content: $value unquote($options);
    -ms-flex-pack: str-replace($value, "flex-") unquote($options);
    justify-content: $value unquote($options);
}

@mixin order($value: 0, $options: "") {
    -moz-order: $value unquote($options);
    -webkit-order: $value unquote($options);
    -ms-flex-order: $value unquote($options);
    order: $value unquote($options);
}

@mixin align-self($value: center) {
    -webkit-align-self: $value;
    align-self: $value;
}


/* Tags */

@mixin list-tags {
    @extend .list--unstyled;

    margin-left: -10px;

    > li {
        display: inline-block;
        padding: 0;
        margin: 0 0 10px 10px;
    }
}

@mixin link-tag {
    display: inline-block;
    background-color: $tagcloud-bg;
    padding: .3rem .7rem;
    text-decoration: none;
    &:before{
      content: '# ';
      color: $grey;
      margin-right: .1rem;
      margin-left: -.1rem;
    }
}


/* Triangles */

%triangle-arrow {
  margin-left: -$dropdown-triangle-size;
  position: absolute;

  &,
  &::before {
    box-sizing: content-box;
    position: absolute;
    border: $dropdown-triangle-size solid transparent;

    height: 0;
    width: 1px;
  }

  &::before {
    content: "";
    z-index: -1;
    border-width: $dropdown-triangle-size;

    left: -$dropdown-triangle-size;
    border-bottom-color: $brand-primary;
  }
}

%triangle-arrow-up {
  @extend %triangle-arrow;

  top: 0;
  margin-top: -$dropdown-triangle-size;

  &,
  &::before {
    border-top: none;
    border-bottom-color: $dropdown-bg;
  }

  &::before {
    top: -4px;
    border-bottom-color: $brand-primary;
  }
}

%triangle-arrow-down {
  @extend %triangle-arrow;

  top: auto;
  bottom: 0;
  margin-bottom: -$dropdown-triangle-size;

  &,
  &::before {
    border-bottom: none;
    border-top-color: $grey;
  }

  &::before {
    top: auto;
    bottom: -4px;
    border-top-color: $brand-primary;
  }
}


// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
  }
  
  // Maximum breakpoint width. Null for the largest (last) breakpoint.
  // The maximum value is calculated as the minimum of the next one less 0.02px
  // to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
  // See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
  // Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
  // See https://bugs.webkit.org/show_bug.cgi?id=178261
  //
  //    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    767.98px
  @function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
  }
  
  // Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
  // Useful for making responsive utilities.
  //
  //    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    ""  (Returns a blank string)
  //    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    "-sm"
  @function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
  }


// Framework custom flex grid generation
//
// Cuttom mixin to generate flex cols
@mixin make-flex-grid-cols($gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {

  .flex-row{
      display: flex;
      flex-wrap: wrap;
      margin-right: -$gutter / 2;
      margin-left: -$gutter / 2;
  }

  @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);

      .flex-col#{$infix}  {
          position: relative;
          width: 100%;
          padding-right: $gutter / 2;
          padding-left: $gutter / 2;
      }

      @include media-up($breakpoint, $breakpoints) {
          .flex-col#{$infix} {
              flex-basis: 0;
              flex-grow: 1;
              max-width: 100%;
          }
      }
  }
}