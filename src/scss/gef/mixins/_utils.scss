/* SASS functions */
/// Replace `$search` with `$replace` in `$string`
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@use "sass:math";

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

/* Styles */
@mixin appearance($value: none) {
    -webkit-appearance: $value;
    -moz-appearance: $value;
    appearance: $value;
}

@mixin box-shadow($value: none) {
    -moz-box-shadow: $value;
    -webkit-box-shadow: $value;
    box-shadow: $value;
}

@mixin box-sizing($value: border-box) {
    -moz-box-sizing: $value;
    -webkit-box-sizing: $value;
    box-sizing: $value;
}

@mixin background-opacity($color, $opacity: 1) {
    background: $color; /* Fallback */
    background: rgba($color, $opacity);
}

/* Others */
@function opposite-direction($directions) {
    $opposite-directions: ();
    $direction-map: ("top": "bottom", "right": "left", "bottom": "top", "left": "right", "center": "center", "ltr": "rtl", "rtl": "ltr");

    @each $direction in $directions {
        $direction: to-lower-case($direction);

        @if map-has-key($direction-map, $direction) {
            $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
        }
        @else {
            @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
        }
    }

    @return $opposite-directions;
}

@mixin triangle($direction, $color: $brand-primary, $size: 5px) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either `top`, `right`, `bottom` or `left`.";
    }

    width: 0;
    height: 0;
    content: '';
    z-index: 2;
    border-#{opposite-direction($direction)}: $size solid $color;

    $perpendicular-borders: $size solid transparent;

    @if $direction == top or $direction == bottom {
        border-left: $perpendicular-borders;
        border-right: $perpendicular-borders;
    }
    @else if $direction == right or $direction == left {
        border-bottom: $perpendicular-borders;
        border-top: $perpendicular-borders;
    }
}

//Incompatible values for w3c validation
//@mixin calc($property, $value) {
//    #{$property}: -moz-calc(#{$value});
//    #{$property}: -webkit-calc(#{$value});
//    #{$property}: calc(#{$value});
//}

@function rem-calc($size) {
    $remSize: math.div($size, 16px);
    @return #{$remSize}rem;
}